-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies (
    id integer,
    name text,
    score integer
);

CREATE TABLE movie_cast (
    movie_id integer,
    cast_id integer,
    cast_name text
);
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import movie-name-score.txt movies
.import movie-cast.txt movie_cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]
   SELECT count(*) * 100 /(select count(*) from movies m1) prop
   FROM movies m2 where m2.score > 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]
SELECT id, name, score from movies order by score desc, name asc LIMIT 7;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id,cast_name, count(*) movie_count
    FROM movie_cast group by (cast_id) 
    order by movie_count desc, cast_name asc LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]


SELECT movie_cast.cast_id, movie_cast.cast_name, avg(score) average_score
from 
    (SELECT cast_id, cast_name, count(*) movie_count
        FROM movie_cast 
        INNER JOIN movies ON movie_cast.movie_id = movies.id
        where score >= 50
        group by (cast_id) 
    ) count_table
    INNER JOIN
    movie_cast 
    ON  movie_cast.cast_id = count_table.cast_id
    INNER JOIN    
        (SELECT * from movies where score >= 50)
        movie_table
    ON movie_table.id = movie_cast.movie_id
WHERE count_table.movie_count > 2
group by (movie_cast.cast_id) 
ORDER BY average_score desc, movie_cast.cast_name asc
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE TEMP VIEW good_collaboration AS
SELECT t1.cast_member_id1, t1.cast_member_id2, t1.movie_count, t1.average_movie_score
FROM
(SELECT cast_member_id1, cast_member_id2, count(*) movie_count, avg(score) average_movie_score
    from (
        SELECT c1.cast_id cast_member_id1,
            c2.cast_id cast_member_id2,
            c1.movie_id
            FROM movie_cast c1 INNER JOIN movie_cast c2 
            ON c1.movie_id = c2.movie_id
            WHERE c1.cast_id < c2.cast_id
        ) cast_tables
        INNER JOIN movies
        ON cast_tables.movie_id = movies.id
        GROUP BY cast_member_id1, cast_member_id2
) t1
WHERE average_movie_score >=40 AND movie_count >= 3       
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]
select t1.cast_id, t2.cast_name, avg(average_movie_score) collaboration_score
FROM
    (
        select cast_member_id1 cast_id, average_movie_score 
        from good_collaboration
        UNION
        select cast_member_id2 cast_id, average_movie_score 
        from good_collaboration
    ) t1 
    INNER JOIN
    (   SELECT cast_id, cast_name
        from 
        movie_cast 
        group by cast_id
    ) t2 ON t1.cast_id = t2.cast_id
group by t1.cast_id order by collaboration_score desc, cast_name asc LIMIT 5
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview USING fts3(
    id int,
    name text,
    year int,
    overview text,
    popularity decimal(10,2)
); 

.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
select count(*) count_overview from movie_overview where overview MATCH 'fight';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --